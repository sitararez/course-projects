

#print reverse
def question_1():
    counter = 0
    list1 = []
    for i in range(5):
        counter += 1
        list1.append(input("Enter string " + str(counter) + "/5: "))
    counter2 = 6
    for j in range(5):
        counter2 -= 1
        reversed = list1[::-1]
        print(" String " + str(counter2) + "/5: ", str(reversed[j]))

#return longest string
def question_3():
    L = []
    for i in range(5):
        L.append(input("Enter string: "))

    def longest(L):
        largestyet = L[0]
        for i in L:
            if len(i) > len(largestyet):
                largestyet = i
            if len(largestyet) > len(i):
                largestyet = largestyet
        print(largestyet)

    longest(L)

#list and tuple
def question_4():
    # part A - list - numbers 1-100
    list1 = []
    for a in range(1, 101):
        list1.append(a)
    print("a) \n\n", list1)

    # part A - tuple
    b = tuple(range(1, 101))
    print("\n", b)

    # part B- list - odd numbers 1-101
    list2 = []
    for c in range(1, 102):
        if c % 2 != 0:
            list2.append(c)
    print("\n\n b) \n\n", list2, "\n\n")

    tuple2 = tuple(range(-1, 101))
    for e in range(len(tuple2)):
        if e % 2 != 0:
            print(e, end=" ,")

    # part C - squares of numbers 0-49
    list3 = []
    for f in range(0, 50):
        square = f ** 2
        list3.append(square)
    print("\n\n c) \n\n", list3,
          "\n\n")

    tuple3 = tuple(range(0, 50))
    for g in range(len(tuple3)):
        squares = g ** 2
        print(squares, end=", ")

    # part D - 60 rand ints
    list4 = []
    for h in range(60):
        import random
        random_number = random.randrange(0, 50)
        list4.append(random_number)
    print("\n\n d) \n\n", list4, "\n\n")

    # part D - tuple
    tuple4 = tuple(range(60))
    for j in tuple4:
        import random
        random_numbers = random.randrange(0, 50)
        print(random_numbers, end=", ")

    # part E - 50 zeros
    list5 = []
    for k in range(50):
        k = 0
        list5.append(k)
    print("\n\n e) \n\n", list5, "\n\n")

    tuple(range(50))
    num = '0, ' * 50
    print(num)
  
  
#q4 using list comprehension
def question_5():
  #part A
  listcomp1a = [aa for aa in range(1, 101)]
  print("\n\n", listcomp1a)

  #part B
  listcomp1b = [cc for cc in range(1, 102) if cc % 2 != 0]
  print("\n\n b) \n\n", listcomp1b, "\n\n")

  #part c
  listcomp1c = [ff**2 for ff in range(0,50)]
  print("\n\n c) \n\n", listcomp1c,"\n\n")

  #part d 

  import random
  random_nums = random.randrange(0, 50)
  listcomp1d2 = [random_nums for k in range(60)]
  print("\n\n d) \n\n", listcomp1d2, "\n\n")

  #part e
  zero = 0
  listcomp1e = [zero for k in range(50)]
  print("\n\n e) \n\n", listcomp1e, "\n\n")


#perimeter of polygon, input list of tuples
def question_6():
    from math import sqrt
    # testing on traingle
    poly = ((0, 0), (1, 0), (0, 1))

    def perimeter(poly):
        poly_perimeter = 0

        for coordinate in range(len(poly)):
            xx1 = poly[coordinate]
            yy1 = poly[coordinate]
            xx2 = poly[coordinate - 1]
            yy2 = poly[coordinate - 1]

            distance = sqrt((xx2[0] - xx1[0]) ** 2 + (yy2[1] - yy1[1]) ** 2)
            poly_perimeter += distance
        return poly_perimeter

    print(perimeter(poly))




#permutation
'''
(0) initialize an empty list P and a copy of L: C = list(L)
(1) Use random.randrange(0, len(C)) to get a random index, i
(2) remove element i from the list C using pop() and
(3) append that element to the new list P
(4) repeat steps (1-3) until all the elements are transferred from C to P
(5) return the new list P
'''

def question_7():
    poly = [(0, 0), (20, 0), (20, 10), (0, 10)]

    def permutations(L):
        import random
        listP = []
        C = list(L)
        for k in L:
            i = random.randrange(0,len(C))
            j = C.pop(i)
            listP.append(j)
        return listP
    print(permutations([(0, 0), (20, 0), (20, 10), (0, 10)]))
    print(permutations(range(0,30)))
    print(permutations([19, 4, 3, 1, 7]))
    print(permutations([19, 4, 3, 1, 7]))
    print(permutations(poly))
    print(permutations(poly))




if __name__ == "__main__":
  question_1()  
  question_3()
  question_4()
  question_5()
  question_6()
  question_7()
  
